//
//  DogsImagesViewController.swift
//  wikiDog
//
//  Created by Daniel Romero on 25-11-19.
//  Copyright (c) 2019 Dromero. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Kingfisher

protocol DogsImagesDisplayLogic: class
{
  func errorImagesDogs(viewModel: DogsImages.Images.ViewModel)
  func successImagesDogs(viewModel: DogsImages.Images.ViewModel)
}

class DogsImagesViewController: UIViewController, DogsImagesDisplayLogic,ActivityIndicatorPresenter
{
  var interactor: DogsImagesBusinessLogic?
  var router: (NSObjectProtocol & DogsImagesRoutingLogic & DogsImagesDataPassing)?

  
  @IBOutlet weak var imageColelectionView: UICollectionView!
  
  // MARK: Object lifecycle
  var activityIndicator = UIActivityIndicatorView()
  var breed: Breeds!
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DogsImagesInteractor()
    let presenter = DogsImagesPresenter()
    let router = DogsImagesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    configureView()
  }
  

  override func viewWillAppear(_ animated: Bool) {
      super.viewWillAppear(animated)

    
    
      self.showActivityIndicator()
      let request = DogsImages.Images.Request()
      interactor?.loadBreedsImages(request: request)
   }
  
  func configureView()
  {
    
    if #available(iOS 11.0, *)
    {
      self.navigationItem.largeTitleDisplayMode = .never
    }
   
    navigationController?.navigationBar.barTintColor = Constants.Colors.backgroundColor
    navigationController?.navigationBar.tintColor = .white
    navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor : UIColor.white]
  

    self.view.backgroundColor = Constants.Colors.backgroundColor
    
    imageColelectionView.delegate = self
    imageColelectionView.dataSource = self
    imageColelectionView.showsVerticalScrollIndicator = false
    imageColelectionView.backgroundColor =  UIColor.clear
    
   
  }
  
    
  func errorImagesDogs(viewModel: DogsImages.Images.ViewModel)
  {
    self.hideActivityIndicator()
    self.alert(message: viewModel.message)
  }
  
  func successImagesDogs(viewModel: DogsImages.Images.ViewModel)
  {
    self.hideActivityIndicator()
    self.breed = viewModel.breed
    self.title = breed.name.uppercased()
    
    imageColelectionView.reloadData()
  }
}

extension DogsImagesViewController: UICollectionViewDataSource, UICollectionViewDelegate {
  
  // MARK: - Collection view data source
  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    
    if self.breed == nil {
      return 0
    }else{
      return self.breed.images.count
    }
 
  }
  
  // make a cell for each cell index path
  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    
    // get a reference to our storyboard cell
    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "TFCell", for: indexPath as IndexPath) as! ImageCollectionViewCell
    cell.link = self.breed.images[indexPath.row].link
    return cell
  }
  
  // MARK: - UICollectionViewDelegate protocol
  
  func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    
    let url = URL(string: self.breed.images[indexPath.row].link)
    ImageDownloader.default.downloadImage(with:url! , options: [], progressBlock: nil) {
      (image, error, url, data) in
      // handle tap events
      let imageView = UIImageView(image: image)
      imageView.frame = self.view.frame
      imageView.backgroundColor = Constants.Colors.backgroundColor
      imageView.contentMode = .center
      imageView.isUserInteractionEnabled = true
      
      let tap = UITapGestureRecognizer(target: self, action: #selector(self.dismissFullscreenImage))
      imageView.addGestureRecognizer(tap)
      
      self.view.addSubview(imageView)
      
    }
   
  }
  
  // Use to back from full mode
  @objc func dismissFullscreenImage(_ sender: UITapGestureRecognizer) {
    sender.view?.removeFromSuperview()
  }
  
}
