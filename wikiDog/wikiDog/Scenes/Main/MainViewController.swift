//
//  MainViewController.swift
//  wikiDog
//
//  Created by Daniel Romero on 25-11-19.
//  Copyright (c) 2019 Dromero. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RealmSwift

protocol MainDisplayLogic: class
{
  func errorFetchDogs(viewModel: Main.Requestbreeds.ViewModel)
  func successFetchDogs(viewModel: Main.Requestbreeds.ViewModel)
 
  func successSelectDogs(viewModel: Main.SelectBreeds.ViewModel)
}

class MainViewController: UITableViewController, MainDisplayLogic,ActivityIndicatorPresenter
{
  var interactor: MainBusinessLogic?
  var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
  
  
  // MARK: Object lifecycle

  var activityIndicator = UIActivityIndicatorView()
  let realm = try! Realm()
  var breeds: Results<Breeds>!
  var filteredBreeds: Results<Breeds>!
  
  var isSearchBarEmpty: Bool {
    return searchController.searchBar.text?.isEmpty ?? true
  }
 
  var isFiltering: Bool {
    return searchController.isActive && !isSearchBarEmpty
  }
  
  let searchController = UISearchController(searchResultsController: nil)
  static let tableViewCellIdentifier = "cellID"
  private static let nibName = "TableCell"
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MainInteractor()
    let presenter = MainPresenter()
    let router = MainRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    configureView()
    configureNavegationBar()
    
    searchController.searchResultsUpdater = self
    searchController.obscuresBackgroundDuringPresentation = false
    searchController.searchBar.placeholder = Constants.Messages.General.searchTitle
    searchController.searchBar.setValue(Constants.Messages.General.searchCancelText, forKey: "cancelButtonText")
    
    if #available(iOS 11.0, *) {
       navigationItem.searchController = searchController
       navigationItem.hidesSearchBarWhenScrolling = false
    } else {
       tableView.tableHeaderView = searchController.searchBar
    }
    
    definesPresentationContext = true
  }

  
  func configureView()
  {
    
    self.title = Constants.Messages.General.navTitle
    self.breeds = Breeds.all().sorted(byKeyPath: "name", ascending: true)
  
    self.refreshControl = UIRefreshControl()
           //self.refreshControl!.attributedTitle = NSAttributedString(string: "Pull to refresh")
    self.refreshControl!.addTarget(self, action: Selector(("refresh:")), for: UIControl.Event.valueChanged)
           self.tableView.addSubview(refreshControl!)
    
    let nib = UINib(nibName: MainViewController.nibName, bundle: nil)
    tableView.register(nib, forCellReuseIdentifier: MainViewController.tableViewCellIdentifier)
    
    tableView.showsVerticalScrollIndicator = false
    tableView.backgroundColor =  .white
    tableView.separatorStyle = .none
    //tableView.addSubview(self.refreshControl)
    
    self.view.backgroundColor = Constants.Colors.backgroundColor
    
    self.showActivityIndicator()
    let request = Main.Requestbreeds.Request()
    interactor?.loadBreedsRequest(request: request)
  }
    
    /// NavigationBar
  func configureNavegationBar()
  {
    
    let navLabel = UILabel()
    let fullString = NSMutableAttributedString(string: Constants.Messages.General.navTextFirst)
    fullString.append(NSAttributedString(string: Constants.Messages.General.navTextLast))
    navLabel.attributedText = fullString
    self.navigationItem.titleView = navLabel
    
    navigationController?.navigationBar.backgroundColor = Constants.Colors.backgroundColor
    navigationController?.navigationBar.titleTextAttributes = [.foregroundColor: Constants.Colors.backgroundColor]
  }
  
  
  @objc func refresh(_ refreshControl: UIRefreshControl) {
    self.showActivityIndicator()
    let request = Main.Requestbreeds.Request()
    interactor?.loadBreedsRequest(request: request)
    refreshControl.endRefreshing()
  }
  
  func filterContentForSearchText(_ searchText: String)
  {
    self.filteredBreeds = Breeds.all().sorted(byKeyPath: "name", ascending: true).filter("name CONTAINS[c] %@", searchText)
    self.tableView.reloadData()
  }
  
  func successFetchDogs(viewModel: Main.Requestbreeds.ViewModel)
   {
     self.hideActivityIndicator()
     self.breeds = viewModel.breeds.sorted(byKeyPath: "name", ascending: true)
     self.tableView.reloadData()
   }
   func errorFetchDogs(viewModel: Main.Requestbreeds.ViewModel)
   {
     self.hideActivityIndicator()
     self.alert(message: viewModel.message)
   }
   
   func successSelectDogs(viewModel: Main.SelectBreeds.ViewModel)
   {
      router?.routeToDogsImages(segue: nil)
   }
}

extension MainViewController {
   
   // MARK: - Table view data source
  override func numberOfSections(in tableView: UITableView) -> Int
   {
    
     if isFiltering {
       return filteredBreeds.count
     }
    
     guard self.breeds.isEmpty  else {
       return self.breeds.count
     }
     return 0
   }
  
  override func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat
    {
      return 1
    }
    
   override func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView?
    {
      let footerView = UIView(frame: CGRect(x:0, y:0, width:tableView.frame.size.width, height:1))
      footerView.backgroundColor = UIColor.clear
      return footerView
    }
  
   
   override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
   {
     return 1
   }
   
   override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
     return 80
   }
   
   
   override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
   {
     let cell = tableView.dequeueReusableCell(withIdentifier: MainViewController.tableViewCellIdentifier, for: indexPath) as! BreedCell
     cell.selectionStyle = .none
    
     if isFiltering {
       cell.breed = self.filteredBreeds[indexPath.section]
     } else {
       cell.breed = self.breeds[indexPath.section]
     }
    
     return cell
   }
   
   override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
    
     if isFiltering {
        let request = Main.SelectBreeds.Request(name: self.filteredBreeds[indexPath.section].name)
        interactor?.selectBreeds(request: request)
     } else {
        let request = Main.SelectBreeds.Request(name: self.breeds[indexPath.section].name)
        interactor?.selectBreeds(request: request)
     }
   }
 }

extension MainViewController: UISearchResultsUpdating {
  func updateSearchResults(for searchController: UISearchController) {
    let searchBar = searchController.searchBar
    filterContentForSearchText(searchBar.text!)
  }
}
